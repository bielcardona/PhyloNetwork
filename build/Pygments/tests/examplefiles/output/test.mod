(lp1
(ccopy_reg
_reconstructor
p2
(cpygments.token
_TokenType
p3
c__builtin__
tuple
p4
(S'Comment'
p5
S'Multiline'
p6
ttRp7
(dp8
S'subtypes'
p9
c__builtin__
set
p10
((ltRp11
sS'parent'
p12
g2
(g3
g4
(g5
ttRp13
(dp14
g12
g2
(g3
g4
(ttRp15
(dp16
g5
g13
sS'Name'
p17
g2
(g3
g4
(g17
ttRp18
(dp19
S'Function'
p20
g2
(g3
g4
(g17
g20
ttRp21
(dp22
g9
g10
((ltRp23
sg12
g18
sbsS'Exception'
p24
g2
(g3
g4
(g17
g24
ttRp25
(dp26
g9
g10
((ltRp27
sg12
g18
sbsS'Tag'
p28
g2
(g3
g4
(g17
g28
ttRp29
(dp30
g9
g10
((ltRp31
sg12
g18
sbsS'Constant'
p32
g2
(g3
g4
(g17
g32
ttRp33
(dp34
g9
g10
((ltRp35
sg12
g18
sbsg12
g15
sS'Pseudo'
p36
g2
(g3
g4
(g17
g36
ttRp37
(dp38
g9
g10
((ltRp39
sg12
g18
sbsS'Attribute'
p40
g2
(g3
g4
(g17
g40
ttRp41
(dp42
g9
g10
((ltRp43
sg12
g18
sbsS'Label'
p44
g2
(g3
g4
(g17
g44
ttRp45
(dp46
g9
g10
((ltRp47
sg12
g18
sbsS'Blubb'
p48
g2
(g3
g4
(g17
g48
ttRp49
(dp50
g9
g10
((ltRp51
sg12
g18
sbsS'Entity'
p52
g2
(g3
g4
(g17
g52
ttRp53
(dp54
g9
g10
((ltRp55
sg12
g18
sbsS'Builtin'
p56
g2
(g3
g4
(g17
g56
ttRp57
(dp58
g9
g10
((lp59
g2
(g3
g4
(g17
g56
g36
ttRp60
(dp61
g9
g10
((ltRp62
sg12
g57
sbatRp63
sg36
g60
sg12
g18
sbsS'Other'
p64
g2
(g3
g4
(g17
g64
ttRp65
(dp66
g9
g10
((ltRp67
sg12
g18
sbsS'Identifier'
p68
g2
(g3
g4
(g17
g68
ttRp69
(dp70
g9
g10
((ltRp71
sg12
g18
sbsS'Variable'
p72
g2
(g3
g4
(g17
g72
ttRp73
(dp74
g12
g18
sS'Global'
p75
g2
(g3
g4
(g17
g72
g75
ttRp76
(dp77
g9
g10
((ltRp78
sg12
g73
sbsS'Instance'
p79
g2
(g3
g4
(g17
g72
g79
ttRp80
(dp81
g9
g10
((ltRp82
sg12
g73
sbsS'Anonymous'
p83
g2
(g3
g4
(g17
g72
g83
ttRp84
(dp85
g9
g10
((ltRp86
sg12
g73
sbsg9
g10
((lp87
g84
ag80
ag76
ag2
(g3
g4
(g17
g72
S'Class'
p88
ttRp89
(dp90
g9
g10
((ltRp91
sg12
g73
sbatRp92
sg88
g89
sbsg9
g10
((lp93
g2
(g3
g4
(g17
S'Decorator'
p94
ttRp95
(dp96
g9
g10
((ltRp97
sg12
g18
sbag41
ag33
ag37
ag2
(g3
g4
(g17
S'Namespace'
p98
ttRp99
(dp100
g9
g10
((ltRp101
sg12
g18
sbag69
ag57
ag73
ag65
ag49
ag53
ag21
ag2
(g3
g4
(g17
S'Property'
p102
ttRp103
(dp104
g9
g10
((ltRp105
sg12
g18
sbag45
ag29
ag25
ag2
(g3
g4
(g17
g88
ttRp106
(dp107
g9
g10
((ltRp108
sg12
g18
sbatRp109
sg102
g103
sg88
g106
sg94
g95
sg98
g99
sbsS'Keyword'
p110
g2
(g3
g4
(g110
ttRp111
(dp112
S'Pervasive'
p113
g2
(g3
g4
(g110
g113
ttRp114
(dp115
g9
g10
((ltRp116
sg12
g111
sbsg32
g2
(g3
g4
(g110
g32
ttRp117
(dp118
g9
g10
((ltRp119
sg12
g111
sbsg12
g15
sg98
g2
(g3
g4
(g110
g98
ttRp120
(dp121
g9
g10
((ltRp122
sg12
g111
sbsg36
g2
(g3
g4
(g110
g36
ttRp123
(dp124
g9
g10
((ltRp125
sg12
g111
sbsS'Reserved'
p126
g2
(g3
g4
(g110
g126
ttRp127
(dp128
g9
g10
((ltRp129
sg12
g111
sbsS'Declaration'
p130
g2
(g3
g4
(g110
g130
ttRp131
(dp132
g9
g10
((ltRp133
sg12
g111
sbsg72
g2
(g3
g4
(g110
g72
ttRp134
(dp135
g9
g10
((ltRp136
sg12
g111
sbsg9
g10
((lp137
g117
ag127
ag2
(g3
g4
(g110
S'Type'
p138
ttRp139
(dp140
g9
g10
((ltRp141
sg12
g111
sbag114
ag131
ag134
ag120
ag123
atRp142
sg138
g139
sbsS'Generic'
p143
g2
(g3
g4
(g143
ttRp144
(dp145
S'Prompt'
p146
g2
(g3
g4
(g143
g146
ttRp147
(dp148
g9
g10
((ltRp149
sg12
g144
sbsg12
g15
sS'Deleted'
p150
g2
(g3
g4
(g143
g150
ttRp151
(dp152
g9
g10
((ltRp153
sg12
g144
sbsS'Traceback'
p154
g2
(g3
g4
(g143
g154
ttRp155
(dp156
g9
g10
((ltRp157
sg12
g144
sbsS'Emph'
p158
g2
(g3
g4
(g143
g158
ttRp159
(dp160
g9
g10
((ltRp161
sg12
g144
sbsS'Output'
p162
g2
(g3
g4
(g143
g162
ttRp163
(dp164
g9
g10
((ltRp165
sg12
g144
sbsS'Subheading'
p166
g2
(g3
g4
(g143
g166
ttRp167
(dp168
g9
g10
((ltRp169
sg12
g144
sbsS'Error'
p170
g2
(g3
g4
(g143
g170
ttRp171
(dp172
g9
g10
((ltRp173
sg12
g144
sbsg9
g10
((lp174
g163
ag159
ag171
ag167
ag155
ag151
ag2
(g3
g4
(g143
S'Heading'
p175
ttRp176
(dp177
g9
g10
((ltRp178
sg12
g144
sbag2
(g3
g4
(g143
S'Inserted'
p179
ttRp180
(dp181
g9
g10
((ltRp182
sg12
g144
sbag2
(g3
g4
(g143
S'Strong'
p183
ttRp184
(dp185
g9
g10
((ltRp186
sg12
g144
sbag147
atRp187
sg183
g184
sg179
g180
sg175
g176
sbsS'Text'
p188
g2
(g3
g4
(g188
ttRp189
(dp190
g9
g10
((lp191
g2
(g3
g4
(g188
S'Symbol'
p192
ttRp193
(dp194
g9
g10
((ltRp195
sg12
g189
sbag2
(g3
g4
(g188
S'Whitespace'
p196
ttRp197
(dp198
g9
g10
((ltRp199
sg12
g189
sbatRp200
sg192
g193
sg196
g197
sg12
g15
sbsS'Punctuation'
p201
g2
(g3
g4
(g201
ttRp202
(dp203
g9
g10
((lp204
g2
(g3
g4
(g201
S'Indicator'
p205
ttRp206
(dp207
g9
g10
((ltRp208
sg12
g202
sbatRp209
sg205
g206
sg12
g15
sbsS'Token'
p210
g15
sS'Number'
p211
g2
(g3
g4
(S'Literal'
p212
g211
ttRp213
(dp214
S'Bin'
p215
g2
(g3
g4
(g212
g211
g215
ttRp216
(dp217
g9
g10
((ltRp218
sg12
g213
sbsS'Binary'
p219
g2
(g3
g4
(g212
g211
g219
ttRp220
(dp221
g9
g10
((ltRp222
sg12
g213
sbsg12
g2
(g3
g4
(g212
ttRp223
(dp224
S'String'
p225
g2
(g3
g4
(g212
g225
ttRp226
(dp227
S'Regex'
p228
g2
(g3
g4
(g212
g225
g228
ttRp229
(dp230
g9
g10
((ltRp231
sg12
g226
sbsS'Interpol'
p232
g2
(g3
g4
(g212
g225
g232
ttRp233
(dp234
g9
g10
((ltRp235
sg12
g226
sbsS'Regexp'
p236
g2
(g3
g4
(g212
g225
g236
ttRp237
(dp238
g9
g10
((ltRp239
sg12
g226
sbsg12
g223
sS'Heredoc'
p240
g2
(g3
g4
(g212
g225
g240
ttRp241
(dp242
g9
g10
((ltRp243
sg12
g226
sbsS'Double'
p244
g2
(g3
g4
(g212
g225
g244
ttRp245
(dp246
g9
g10
((ltRp247
sg12
g226
sbsg192
g2
(g3
g4
(g212
g225
g192
ttRp248
(dp249
g9
g10
((ltRp250
sg12
g226
sbsS'Escape'
p251
g2
(g3
g4
(g212
g225
g251
ttRp252
(dp253
g9
g10
((ltRp254
sg12
g226
sbsS'Character'
p255
g2
(g3
g4
(g212
g225
g255
ttRp256
(dp257
g9
g10
((ltRp258
sg12
g226
sbsS'Interp'
p259
g2
(g3
g4
(g212
g225
g259
ttRp260
(dp261
g9
g10
((ltRp262
sg12
g226
sbsS'Backtick'
p263
g2
(g3
g4
(g212
g225
g263
ttRp264
(dp265
g9
g10
((ltRp266
sg12
g226
sbsS'Char'
p267
g2
(g3
g4
(g212
g225
g267
ttRp268
(dp269
g9
g10
((ltRp270
sg12
g226
sbsS'Single'
p271
g2
(g3
g4
(g212
g225
g271
ttRp272
(dp273
g9
g10
((ltRp274
sg12
g226
sbsg64
g2
(g3
g4
(g212
g225
g64
ttRp275
(dp276
g9
g10
((ltRp277
sg12
g226
sbsS'Doc'
p278
g2
(g3
g4
(g212
g225
g278
ttRp279
(dp280
g9
g10
((ltRp281
sg12
g226
sbsg9
g10
((lp282
g275
ag2
(g3
g4
(g212
g225
S'Atom'
p283
ttRp284
(dp285
g9
g10
((ltRp286
sg12
g226
sbag245
ag268
ag260
ag279
ag241
ag264
ag233
ag248
ag237
ag229
ag272
ag256
ag252
atRp287
sg283
g284
sbsg12
g15
sg211
g213
sS'Scalar'
p288
g2
(g3
g4
(g212
g288
ttRp289
(dp290
g9
g10
((lp291
g2
(g3
g4
(g212
g288
S'Plain'
p292
ttRp293
(dp294
g9
g10
((ltRp295
sg12
g289
sbatRp296
sg12
g223
sg292
g293
sbsg64
g2
(g3
g4
(g212
g64
ttRp297
(dp298
g9
g10
((ltRp299
sg12
g223
sbsS'Date'
p300
g2
(g3
g4
(g212
g300
ttRp301
(dp302
g9
g10
((ltRp303
sg12
g223
sbsg9
g10
((lp304
g301
ag226
ag297
ag213
ag289
atRp305
sbsS'Decimal'
p306
g2
(g3
g4
(g212
g211
g306
ttRp307
(dp308
g9
g10
((ltRp309
sg12
g213
sbsS'Float'
p310
g2
(g3
g4
(g212
g211
g310
ttRp311
(dp312
g9
g10
((ltRp313
sg12
g213
sbsS'Hex'
p314
g2
(g3
g4
(g212
g211
g314
ttRp315
(dp316
g9
g10
((ltRp317
sg12
g213
sbsS'Integer'
p318
g2
(g3
g4
(g212
g211
g318
ttRp319
(dp320
g9
g10
((lp321
g2
(g3
g4
(g212
g211
g318
S'Long'
p322
ttRp323
(dp324
g9
g10
((ltRp325
sg12
g319
sbatRp326
sg322
g323
sg12
g213
sbsS'Octal'
p327
g2
(g3
g4
(g212
g211
g327
ttRp328
(dp329
g9
g10
((ltRp330
sg12
g213
sbsg9
g10
((lp331
g216
ag220
ag328
ag307
ag2
(g3
g4
(g212
g211
S'Oct'
p332
ttRp333
(dp334
g9
g10
((ltRp335
sg12
g213
sbag319
ag311
ag315
atRp336
sg332
g333
sbsg212
g223
sg64
g2
(g3
g4
(g64
ttRp337
(dp338
g9
g10
((ltRp339
sg12
g15
sbsg170
g2
(g3
g4
(g170
ttRp340
(dp341
g9
g10
((ltRp342
sg12
g15
sbsS'Operator'
p343
g2
(g3
g4
(g343
ttRp344
(dp345
g9
g10
((lp346
g2
(g3
g4
(g343
S'Word'
p347
ttRp348
(dp349
g9
g10
((ltRp350
sg12
g344
sbatRp351
sg347
g348
sg12
g15
sbsg9
g10
((lp352
g13
ag340
ag144
ag189
ag18
ag202
ag111
ag223
ag344
ag337
atRp353
sg225
g226
sbsS'Preproc'
p354
g2
(g3
g4
(g5
g354
ttRp355
(dp356
g9
g10
((ltRp357
sg12
g13
sbsg271
g2
(g3
g4
(g5
g271
ttRp358
(dp359
g9
g10
((ltRp360
sg12
g13
sbsg6
g7
sg9
g10
((lp361
g2
(g3
g4
(g5
S'Special'
p362
ttRp363
(dp364
g9
g10
((ltRp365
sg12
g13
sbag355
ag358
ag7
atRp366
sg362
g363
sbsbV(* LIFO Storage Library\u000a *\u000a *  @file LIFO.mod\u000a *  LIFO implementation\u000a *\u000a *  Universal Dynamic Stack\u000a *\u000a *  Author: Benjamin Kowarsch\u000a *\u000a *  Copyright (C) 2009 Benjamin Kowarsch. All rights reserved.\u000a *\u000a *  License:\u000a *\u000a *  Redistribution  and  use  in source  and  binary forms,  with  or  without\u000a *  modification, are permitted provided that the following conditions are met\u000a *\u000a *  1) NO FEES may be charged for the provision of the software.  The software\u000a *     may  NOT  be published  on websites  that contain  advertising,  unless\u000a *     specific  prior  written  permission has been obtained.\u000a *\u000a *  2) Redistributions  of source code must retain the above copyright notice,\u000a *     this list of conditions and the following disclaimer.\u000a *\u000a *  3) Redistributions  in binary form  must  reproduce  the  above  copyright\u000a *     notice,  this list of conditions  and  the following disclaimer  in the\u000a *     documentation and other materials provided with the distribution.\u000a *\u000a *  4) Neither the author's name nor the names of any contributors may be used\u000a *     to endorse  or  promote  products  derived  from this software  without\u000a *     specific prior written permission.\u000a *\u000a *  5) Where this list of conditions  or  the following disclaimer, in part or\u000a *     as a whole is overruled  or  nullified by applicable law, no permission\u000a *     is granted to use the software.\u000a *\u000a * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\u000a * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO,  THE\u000a * IMPLIED WARRANTIES OF MERCHANTABILITY  AND FITNESS FOR A PARTICULAR PURPOSE\u000a * ARE DISCLAIMED.  IN NO EVENT  SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\u000a * LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR\u000a * CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED  TO,  PROCUREMENT OF\u000a * SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE,  DATA,  OR PROFITS; OR BUSINESS\u000a * INTERRUPTION)  HOWEVER  CAUSED  AND ON ANY THEORY OF LIABILITY,  WHETHER IN\u000a * CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)\u000a * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  EVEN IF ADVISED OF THE\u000a * POSSIBILITY OF SUCH DAMAGE.\u000a *  \u000a *)
p367
tp368
a(g189
V\u000a\u000a\u000a
p369
tp370
a(g127
VIMPLEMENTATION
p371
tp372
a(g189
V 
tp373
a(g7
V(* OF *)
p374
tp375
a(g189
V 
tp376
a(g127
VMODULE
p377
tp378
a(g189
V 
tp379
a(g18
VLIFO
p380
tp381
a(g202
V;
tp382
a(g189
V\u000a\u000a
p383
tp384
a(g127
VFROM
p385
tp386
a(g189
V 
tp387
a(g18
VSYSTEM
p388
tp389
a(g189
V 
tp390
a(g127
VIMPORT
p391
tp392
a(g189
V 
tp393
a(g18
VADDRESS
p394
tp395
a(g202
V,
tp396
a(g189
V 
tp397
a(g18
VADR
p398
tp399
a(g202
V,
tp400
a(g189
V 
tp401
a(g18
VTSIZE
p402
tp403
a(g202
V;
tp404
a(g189
V\u000a
tp405
a(g127
VFROM
p406
tp407
a(g189
V 
tp408
a(g18
VStorage
p409
tp410
a(g189
V 
tp411
a(g127
VIMPORT
p412
tp413
a(g189
V 
tp414
a(g18
VALLOCATE
p415
tp416
a(g202
V,
tp417
a(g189
V 
tp418
a(g18
VDEALLOCATE
p419
tp420
a(g202
V;
tp421
a(g189
V\u000a\u000a\u000a
p422
tp423
a(g7
V(* ---------------------------------------------------------------------------\u000a// Private type : ListEntry\u000a// ---------------------------------------------------------------------------\u000a*)
p424
tp425
a(g189
V\u000a
tp426
a(g127
VTYPE
p427
tp428
a(g189
V 
tp429
a(g18
VListPtr
p430
tp431
a(g189
V 
tp432
a(g344
V=
tp433
a(g189
V 
tp434
a(g127
VPOINTER
p435
tp436
a(g189
V 
tp437
a(g127
VTO
p438
tp439
a(g189
V 
tp440
a(g18
VListEntry
p441
tp442
a(g202
V;
tp443
a(g189
V\u000a\u000a
p444
tp445
a(g127
VTYPE
p446
tp447
a(g189
V 
tp448
a(g18
VListEntry
p449
tp450
a(g189
V 
tp451
a(g344
V=
tp452
a(g189
V 
tp453
a(g127
VRECORD
p454
tp455
a(g189
V\u000a
tp456
a(g189
V    
p457
tp458
a(g18
Vvalue
p459
tp460
a(g189
V 
tp461
a(g202
V:
tp462
a(g189
V 
tp463
a(g18
VDataPtr
p464
tp465
a(g202
V;
tp466
a(g189
V\u000a
tp467
a(g189
V    
p468
tp469
a(g18
Vnext
p470
tp471
a(g189
V  
p472
tp473
a(g202
V:
tp474
a(g189
V 
tp475
a(g18
VListPtr
p476
tp477
a(g189
V\u000a
tp478
a(g127
VEND
p479
tp480
a(g202
V;
tp481
a(g189
V 
tp482
a(g7
V(* ListEntry *)
p483
tp484
a(g189
V\u000a\u000a\u000a
p485
tp486
a(g7
V(* ---------------------------------------------------------------------------\u000a// Opaque type : LIFO.Stack\u000a// ---------------------------------------------------------------------------\u000a// CAUTION:  Modula-2 does not support the use of variable length array fields\u000a// in records.  VLAs can  only  be implemented  using pointer arithmetic which\u000a// means  there is  no type checking  and  no boundary checking  on the array.\u000a// It also means that  array notation cannot be used on the array  which makes\u000a// the code  difficult to read  and maintain.  As a result,  Modula-2  is less\u000a// safe and less readable than C when it comes to using VLAs.  Great care must\u000a// be taken to make sure that the code accessing VLA fields is safe.  Boundary\u000a// checks must be inserted manually.  Size checks must be inserted manually to\u000a// compensate for the absence of type checks. *)
p487
tp488
a(g189
V\u000a\u000a
p489
tp490
a(g127
VTYPE
p491
tp492
a(g189
V 
tp493
a(g18
VStack
p494
tp495
a(g189
V 
tp496
a(g344
V=
tp497
a(g189
V 
tp498
a(g127
VPOINTER
p499
tp500
a(g189
V 
tp501
a(g127
VTO
p502
tp503
a(g189
V 
tp504
a(g18
VStackDescriptor
p505
tp506
a(g202
V;
tp507
a(g189
V\u000a\u000a
p508
tp509
a(g127
VTYPE
p510
tp511
a(g189
V 
tp512
a(g18
VStackDescriptor
p513
tp514
a(g189
V 
tp515
a(g344
V=
tp516
a(g189
V 
tp517
a(g127
VRECORD
p518
tp519
a(g189
V\u000a
tp520
a(g189
V    
p521
tp522
a(g18
Voverflow
p523
tp524
a(g189
V   
p525
tp526
a(g202
V:
tp527
a(g189
V 
tp528
a(g18
VListPtr
p529
tp530
a(g202
V;
tp531
a(g189
V\u000a
tp532
a(g189
V    
p533
tp534
a(g18
VentryCount
p535
tp536
a(g189
V 
tp537
a(g202
V:
tp538
a(g189
V 
tp539
a(g18
VStackSize
p540
tp541
a(g202
V;
tp542
a(g189
V\u000a
tp543
a(g189
V    
p544
tp545
a(g18
VarraySize
p546
tp547
a(g189
V  
p548
tp549
a(g202
V:
tp550
a(g189
V 
tp551
a(g18
VStackSize
p552
tp553
a(g202
V;
tp554
a(g189
V\u000a
tp555
a(g189
V    
p556
tp557
a(g18
Varray
p558
tp559
a(g189
V      
p560
tp561
a(g202
V:
tp562
a(g189
V 
tp563
a(g18
VADDRESS
p564
tp565
a(g189
V 
tp566
a(g7
V(* ARRAY OF DataPtr *)
p567
tp568
a(g189
V\u000a
tp569
a(g127
VEND
p570
tp571
a(g202
V;
tp572
a(g189
V 
tp573
a(g7
V(* StackDescriptor *)
p574
tp575
a(g189
V\u000a\u000a\u000a
p576
tp577
a(g7
V(* ---------------------------------------------------------------------------\u000a// function:  LIFO.new( initial_size, status )\u000a// ---------------------------------------------------------------------------\u000a//\u000a// Creates  and  returns  a new LIFO stack object  with an initial capacity of\u000a// <initialSize>.  If  zero  is passed in  for <initialSize>,  then  the stack\u000a// will be created  with an  initial capacity  of  LIFO.defaultStackSize.  The\u000a// function fails  if a value greater than   LIFO.maximumStackSize  is  passed\u000a// in  for <initialSize> or if memory could not be allocated.\u000a//\u000a// The initial capacity of a stack is the number of entries that can be stored\u000a// in the stack without enlargement.\u000a//\u000a// The status of the operation  is passed back in <status>. *)
p578
tp579
a(g189
V\u000a\u000a
p580
tp581
a(g127
VPROCEDURE
p582
tp583
a(g189
V 
tp584
a(g18
Vnew
p585
tp586
a(g189
V 
tp587
a(g202
V(
tp588
a(g189
V 
tp589
a(g18
VinitialSize
p590
tp591
a(g189
V 
tp592
a(g202
V:
tp593
a(g189
V 
tp594
a(g18
VStackSize
p595
tp596
a(g202
V;
tp597
a(g189
V 
tp598
a(g127
VVAR
p599
tp600
a(g189
V 
tp601
a(g18
Vstatus
p602
tp603
a(g189
V 
tp604
a(g202
V:
tp605
a(g189
V 
tp606
a(g18
VStatus
p607
tp608
a(g189
V 
tp609
a(g202
V)
tp610
a(g189
V 
tp611
a(g202
V:
tp612
a(g189
V 
tp613
a(g18
VStack
p614
tp615
a(g202
V;
tp616
a(g189
V\u000a\u000a
p617
tp618
a(g127
VVAR
p619
tp620
a(g189
V\u000a
tp621
a(g189
V    
p622
tp623
a(g18
VnewStack
p624
tp625
a(g189
V 
tp626
a(g202
V:
tp627
a(g189
V 
tp628
a(g18
VStack
p629
tp630
a(g202
V;
tp631
a(g189
V\u000a
tp632
a(g189
V    \u000a
p633
tp634
a(g127
VBEGIN
p635
tp636
a(g189
V\u000a\u000a
p637
tp638
a(g189
V    
p639
tp640
a(g7
V(* zero size means default *)
p641
tp642
a(g189
V\u000a
tp643
a(g189
V    
p644
tp645
a(g127
VIF
p646
tp647
a(g189
V 
tp648
a(g18
VinitialSize
p649
tp650
a(g189
V 
tp651
a(g344
V=
tp652
a(g189
V 
tp653
a(g319
V0
tp654
a(g189
V 
tp655
a(g127
VTHEN
p656
tp657
a(g189
V\u000a
tp658
a(g189
V        
p659
tp660
a(g18
VinitialSize
p661
tp662
a(g189
V 
tp663
a(g344
V:=
p664
tp665
a(g189
V 
tp666
a(g18
VdefaultStackSize
p667
tp668
a(g202
V;
tp669
a(g189
V\u000a
tp670
a(g189
V    
p671
tp672
a(g127
VEND
p673
tp674
a(g202
V;
tp675
a(g189
V 
tp676
a(g7
V(* IF *)
p677
tp678
a(g189
V\u000a
tp679
a(g189
V    \u000a    
p680
tp681
a(g7
V(* bail out if initial size is too high *)
p682
tp683
a(g189
V\u000a
tp684
a(g189
V    
p685
tp686
a(g127
VIF
p687
tp688
a(g189
V 
tp689
a(g18
VinitialSize
p690
tp691
a(g189
V 
tp692
a(g344
V>
tp693
a(g189
V 
tp694
a(g18
VmaximumStackSize
p695
tp696
a(g189
V 
tp697
a(g127
VTHEN
p698
tp699
a(g189
V\u000a
tp700
a(g189
V        
p701
tp702
a(g18
Vstatus
p703
tp704
a(g189
V 
tp705
a(g344
V:=
p706
tp707
a(g189
V 
tp708
a(g18
VinvalidSize
p709
tp710
a(g202
V;
tp711
a(g189
V\u000a
tp712
a(g189
V        
p713
tp714
a(g127
VRETURN
p715
tp716
a(g189
V 
tp717
a(g114
VNIL
p718
tp719
a(g202
V;
tp720
a(g189
V\u000a
tp721
a(g189
V    
p722
tp723
a(g127
VEND
p724
tp725
a(g202
V;
tp726
a(g189
V 
tp727
a(g7
V(* IF *)
p728
tp729
a(g189
V\u000a
tp730
a(g189
V    \u000a    
p731
tp732
a(g7
V(* allocate new stack object *)
p733
tp734
a(g189
V\u000a
tp735
a(g189
V    
p736
tp737
a(g18
VALLOCATE
p738
tp739
a(g202
V(
tp740
a(g18
VnewStack
p741
tp742
a(g202
V,
tp743
a(g189
V 
tp744
a(g18
VTSIZE
p745
tp746
a(g202
V(
tp747
a(g18
VStack
p748
tp749
a(g202
V)
tp750
a(g189
V 
tp751
a(g344
V+
tp752
a(g189
V 
tp753
a(g18
VTSIZE
p754
tp755
a(g202
V(
tp756
a(g18
VDataPtr
p757
tp758
a(g202
V)
tp759
a(g189
V 
tp760
a(g344
V*
tp761
a(g189
V 
tp762
a(g202
V(
tp763
a(g18
VinitialSize
p764
tp765
a(g189
V 
tp766
a(g344
V-
tp767
a(g189
V 
tp768
a(g319
V1
tp769
a(g202
V)
tp770
a(g202
V)
tp771
a(g202
V;
tp772
a(g189
V\u000a
tp773
a(g189
V    \u000a    
p774
tp775
a(g7
V(* bail out if allocation failed *)
p776
tp777
a(g189
V\u000a
tp778
a(g189
V    
p779
tp780
a(g127
VIF
p781
tp782
a(g189
V 
tp783
a(g18
VnewStack
p784
tp785
a(g189
V 
tp786
a(g344
V=
tp787
a(g189
V 
tp788
a(g114
VNIL
p789
tp790
a(g189
V 
tp791
a(g127
VTHEN
p792
tp793
a(g189
V\u000a
tp794
a(g189
V        
p795
tp796
a(g18
Vstatus
p797
tp798
a(g189
V 
tp799
a(g344
V:=
p800
tp801
a(g189
V 
tp802
a(g18
VallocationFailed
p803
tp804
a(g202
V;
tp805
a(g189
V\u000a
tp806
a(g189
V        
p807
tp808
a(g127
VRETURN
p809
tp810
a(g189
V 
tp811
a(g114
VNIL
p812
tp813
a(g202
V;
tp814
a(g189
V\u000a
tp815
a(g189
V    
p816
tp817
a(g127
VEND
p818
tp819
a(g202
V;
tp820
a(g189
V 
tp821
a(g7
V(* IF *)
p822
tp823
a(g189
V\u000a
tp824
a(g189
V        \u000a    
p825
tp826
a(g7
V(* initialise meta data *)
p827
tp828
a(g189
V\u000a
tp829
a(g189
V    
p830
tp831
a(g18
VnewStack
p832
tp833
a(g344
V^
tp834
a(g202
V.
tp835
a(g18
VarraySize
p836
tp837
a(g189
V 
tp838
a(g344
V:=
p839
tp840
a(g189
V 
tp841
a(g18
VinitialSize
p842
tp843
a(g202
V;
tp844
a(g189
V\u000a
tp845
a(g189
V    
p846
tp847
a(g18
VnewStack
p848
tp849
a(g344
V^
tp850
a(g202
V.
tp851
a(g18
VentryCount
p852
tp853
a(g189
V 
tp854
a(g344
V:=
p855
tp856
a(g189
V 
tp857
a(g319
V0
tp858
a(g202
V;
tp859
a(g189
V\u000a
tp860
a(g189
V    
p861
tp862
a(g18
VnewStack
p863
tp864
a(g344
V^
tp865
a(g202
V.
tp866
a(g18
Voverflow
p867
tp868
a(g189
V 
tp869
a(g344
V:=
p870
tp871
a(g189
V 
tp872
a(g114
VNIL
p873
tp874
a(g202
V;
tp875
a(g189
V\u000a
tp876
a(g189
V    \u000a    
p877
tp878
a(g7
V(* pass status and new stack to caller *)
p879
tp880
a(g189
V\u000a
tp881
a(g189
V    
p882
tp883
a(g18
Vstatus
p884
tp885
a(g189
V 
tp886
a(g344
V:=
p887
tp888
a(g189
V 
tp889
a(g18
Vsuccess
p890
tp891
a(g202
V;
tp892
a(g189
V\u000a
tp893
a(g189
V    
p894
tp895
a(g127
VRETURN
p896
tp897
a(g189
V 
tp898
a(g18
VnewStack
p899
tp900
a(g189
V\u000a
tp901
a(g189
V    \u000a
p902
tp903
a(g127
VEND
p904
tp905
a(g189
V 
tp906
a(g18
Vnew
p907
tp908
a(g202
V;
tp909
a(g189
V\u000a\u000a\u000a
p910
tp911
a(g7
V(* ---------------------------------------------------------------------------\u000a// function:  LIFO.push( stack, value, status )\u000a// ---------------------------------------------------------------------------\u000a//\u000a// Adds a  new entry <value>  to the top of stack <stack>.  The  new entry  is\u000a// added by reference,  no data is copied.  However,  no entry is added if the\u000a// the stack is full,  that is  when the number of entries stored in the stack\u000a// has reached LIFO.maximumStackSize.  The function fails  if NIL is passed in\u000a// for <stack> or <value>,  or if memory could not be allocated.\u000a//\u000a// New entries are allocated dynamically  if the number of entries exceeds the\u000a// initial capacity of the stack.\u000a//\u000a// The status of the operation is passed back in <status>. *)
p912
tp913
a(g189
V\u000a\u000a
p914
tp915
a(g127
VPROCEDURE
p916
tp917
a(g189
V 
tp918
a(g18
Vpush
p919
tp920
a(g189
V 
tp921
a(g202
V(
tp922
a(g189
V 
tp923
a(g127
VVAR
p924
tp925
a(g189
V 
tp926
a(g18
Vstack
p927
tp928
a(g189
V 
tp929
a(g202
V:
tp930
a(g189
V 
tp931
a(g18
VStack
p932
tp933
a(g202
V;
tp934
a(g189
V 
tp935
a(g18
Vvalue
p936
tp937
a(g189
V 
tp938
a(g202
V:
tp939
a(g189
V 
tp940
a(g18
VDataPtr
p941
tp942
a(g202
V;
tp943
a(g189
V 
tp944
a(g127
VVAR
p945
tp946
a(g189
V 
tp947
a(g18
Vstatus
p948
tp949
a(g189
V 
tp950
a(g202
V:
tp951
a(g189
V 
tp952
a(g18
VStatus
p953
tp954
a(g189
V 
tp955
a(g202
V)
tp956
a(g202
V;
tp957
a(g189
V\u000a
tp958
a(g127
VVAR
p959
tp960
a(g189
V\u000a
tp961
a(g189
V    
p962
tp963
a(g18
VnewEntry
p964
tp965
a(g189
V 
tp966
a(g202
V:
tp967
a(g189
V 
tp968
a(g18
VListPtr
p969
tp970
a(g202
V;
tp971
a(g189
V\u000a
tp972
a(g189
V    
p973
tp974
a(g18
VvaluePtr
p975
tp976
a(g189
V 
tp977
a(g202
V:
tp978
a(g189
V 
tp979
a(g127
VPOINTER
p980
tp981
a(g189
V 
tp982
a(g127
VTO
p983
tp984
a(g189
V 
tp985
a(g18
VDataPtr
p986
tp987
a(g202
V;
tp988
a(g189
V\u000a\u000a
p989
tp990
a(g127
VBEGIN
p991
tp992
a(g189
V\u000a\u000a
p993
tp994
a(g189
V    
p995
tp996
a(g7
V(* bail out if stack is NIL *)
p997
tp998
a(g189
V\u000a
tp999
a(g189
V    
p1000
tp1001
a(g127
VIF
p1002
tp1003
a(g189
V 
tp1004
a(g18
Vstack
p1005
tp1006
a(g189
V 
tp1007
a(g344
V=
tp1008
a(g189
V 
tp1009
a(g114
VNIL
p1010
tp1011
a(g189
V 
tp1012
a(g127
VTHEN
p1013
tp1014
a(g189
V\u000a
tp1015
a(g189
V        
p1016
tp1017
a(g18
Vstatus
p1018
tp1019
a(g189
V 
tp1020
a(g344
V:=
p1021
tp1022
a(g189
V 
tp1023
a(g18
VinvalidStack
p1024
tp1025
a(g202
V;
tp1026
a(g189
V\u000a
tp1027
a(g189
V        
p1028
tp1029
a(g127
VRETURN
p1030
tp1031
a(g202
V;
tp1032
a(g189
V\u000a
tp1033
a(g189
V    
p1034
tp1035
a(g127
VEND
p1036
tp1037
a(g202
V;
tp1038
a(g189
V 
tp1039
a(g7
V(* IF *)
p1040
tp1041
a(g189
V\u000a
tp1042
a(g189
V    \u000a    
p1043
tp1044
a(g7
V(* bail out if value is NIL *)
p1045
tp1046
a(g189
V\u000a
tp1047
a(g189
V    
p1048
tp1049
a(g127
VIF
p1050
tp1051
a(g189
V 
tp1052
a(g18
Vvalue
p1053
tp1054
a(g189
V 
tp1055
a(g344
V=
tp1056
a(g189
V 
tp1057
a(g114
VNIL
p1058
tp1059
a(g189
V 
tp1060
a(g127
VTHEN
p1061
tp1062
a(g189
V\u000a
tp1063
a(g189
V        
p1064
tp1065
a(g18
Vstatus
p1066
tp1067
a(g189
V 
tp1068
a(g344
V:=
p1069
tp1070
a(g189
V 
tp1071
a(g18
VinvalidData
p1072
tp1073
a(g202
V;
tp1074
a(g189
V\u000a
tp1075
a(g189
V        
p1076
tp1077
a(g127
VRETURN
p1078
tp1079
a(g202
V;
tp1080
a(g189
V\u000a
tp1081
a(g189
V    
p1082
tp1083
a(g127
VEND
p1084
tp1085
a(g202
V;
tp1086
a(g189
V 
tp1087
a(g7
V(* IF *)
p1088
tp1089
a(g189
V\u000a\u000a
p1090
tp1091
a(g189
V    
p1092
tp1093
a(g7
V(* bail out if stack is full *)
p1094
tp1095
a(g189
V\u000a
tp1096
a(g189
V    
p1097
tp1098
a(g127
VIF
p1099
tp1100
a(g189
V 
tp1101
a(g18
Vstack
p1102
tp1103
a(g344
V^
tp1104
a(g202
V.
tp1105
a(g18
VentryCount
p1106
tp1107
a(g189
V 
tp1108
a(g344
V>
tp1109
a(g344
V=
tp1110
a(g189
V 
tp1111
a(g18
VmaximumStackSize
p1112
tp1113
a(g189
V 
tp1114
a(g127
VTHEN
p1115
tp1116
a(g189
V\u000a
tp1117
a(g189
V        
p1118
tp1119
a(g18
Vstatus
p1120
tp1121
a(g189
V 
tp1122
a(g344
V:=
p1123
tp1124
a(g189
V 
tp1125
a(g18
VstackFull
p1126
tp1127
a(g202
V;
tp1128
a(g189
V\u000a
tp1129
a(g189
V        
p1130
tp1131
a(g127
VRETURN
p1132
tp1133
a(g202
V;
tp1134
a(g189
V\u000a
tp1135
a(g189
V    
p1136
tp1137
a(g127
VEND
p1138
tp1139
a(g202
V;
tp1140
a(g189
V 
tp1141
a(g7
V(* IF *)
p1142
tp1143
a(g189
V\u000a\u000a
p1144
tp1145
a(g189
V    
p1146
tp1147
a(g7
V(* check if index falls within array segment *)
p1148
tp1149
a(g189
V\u000a
tp1150
a(g189
V    
p1151
tp1152
a(g127
VIF
p1153
tp1154
a(g189
V 
tp1155
a(g18
Vstack
p1156
tp1157
a(g344
V^
tp1158
a(g202
V.
tp1159
a(g18
VentryCount
p1160
tp1161
a(g189
V 
tp1162
a(g344
V<
tp1163
a(g189
V 
tp1164
a(g18
Vstack
p1165
tp1166
a(g344
V^
tp1167
a(g202
V.
tp1168
a(g18
VarraySize
p1169
tp1170
a(g189
V 
tp1171
a(g127
VTHEN
p1172
tp1173
a(g189
V\u000a
tp1174
a(g189
V    \u000a        
p1175
tp1176
a(g7
V(* store value in array segment *)
p1177
tp1178
a(g189
V\u000a
tp1179
a(g189
V        \u000a        
p1180
tp1181
a(g7
V(* stack^.array^[stack^.entryCount] := value; *)
p1182
tp1183
a(g189
V\u000a
tp1184
a(g189
V        
p1185
tp1186
a(g18
VvaluePtr
p1187
tp1188
a(g189
V 
tp1189
a(g344
V:=
p1190
tp1191
a(g189
V 
tp1192
a(g18
VADR
p1193
tp1194
a(g202
V(
tp1195
a(g18
Vstack
p1196
tp1197
a(g344
V^
tp1198
a(g202
V.
tp1199
a(g18
Varray
p1200
tp1201
a(g202
V)
tp1202
a(g189
V 
tp1203
a(g344
V+
tp1204
a(g189
V 
tp1205
a(g18
VTSIZE
p1206
tp1207
a(g202
V(
tp1208
a(g18
VDataPtr
p1209
tp1210
a(g202
V)
tp1211
a(g189
V 
tp1212
a(g344
V*
tp1213
a(g189
V 
tp1214
a(g18
Vstack
p1215
tp1216
a(g344
V^
tp1217
a(g202
V.
tp1218
a(g18
VentryCount
p1219
tp1220
a(g202
V;
tp1221
a(g189
V\u000a
tp1222
a(g189
V        
p1223
tp1224
a(g18
VvaluePtr
p1225
tp1226
a(g344
V^
tp1227
a(g189
V 
tp1228
a(g344
V:=
p1229
tp1230
a(g189
V 
tp1231
a(g18
Vvalue
p1232
tp1233
a(g202
V;
tp1234
a(g189
V\u000a
tp1235
a(g189
V        \u000a    
p1236
tp1237
a(g127
VELSE
p1238
tp1239
a(g189
V 
tp1240
a(g7
V(* index falls within overflow segment *)
p1241
tp1242
a(g189
V\u000a
tp1243
a(g189
V    \u000a        
p1244
tp1245
a(g7
V(* allocate new entry slot *)
p1246
tp1247
a(g189
V\u000a
tp1248
a(g189
V        
p1249
tp1250
a(g114
VNEW
p1251
tp1252
a(g202
V(
tp1253
a(g18
VnewEntry
p1254
tp1255
a(g202
V)
tp1256
a(g202
V;
tp1257
a(g189
V\u000a
tp1258
a(g189
V        \u000a        
p1259
tp1260
a(g7
V(* bail out if allocation failed *)
p1261
tp1262
a(g189
V\u000a
tp1263
a(g189
V        
p1264
tp1265
a(g127
VIF
p1266
tp1267
a(g189
V 
tp1268
a(g18
VnewEntry
p1269
tp1270
a(g189
V 
tp1271
a(g344
V=
tp1272
a(g189
V 
tp1273
a(g114
VNIL
p1274
tp1275
a(g189
V 
tp1276
a(g127
VTHEN
p1277
tp1278
a(g189
V\u000a
tp1279
a(g189
V            
p1280
tp1281
a(g18
Vstatus
p1282
tp1283
a(g189
V 
tp1284
a(g344
V:=
p1285
tp1286
a(g189
V 
tp1287
a(g18
VallocationFailed
p1288
tp1289
a(g202
V;
tp1290
a(g189
V\u000a
tp1291
a(g189
V            
p1292
tp1293
a(g127
VRETURN
p1294
tp1295
a(g202
V;
tp1296
a(g189
V\u000a
tp1297
a(g189
V        
p1298
tp1299
a(g127
VEND
p1300
tp1301
a(g202
V;
tp1302
a(g189
V 
tp1303
a(g7
V(* IF *)
p1304
tp1305
a(g189
V\u000a
tp1306
a(g189
V        \u000a        
p1307
tp1308
a(g7
V(* initialise new entry *)
p1309
tp1310
a(g189
V\u000a
tp1311
a(g189
V        
p1312
tp1313
a(g18
VnewEntry
p1314
tp1315
a(g344
V^
tp1316
a(g202
V.
tp1317
a(g18
Vvalue
p1318
tp1319
a(g189
V 
tp1320
a(g344
V:=
p1321
tp1322
a(g189
V 
tp1323
a(g18
Vvalue
p1324
tp1325
a(g202
V;
tp1326
a(g189
V\u000a
tp1327
a(g189
V        \u000a        
p1328
tp1329
a(g7
V(* link new entry into overflow list *)
p1330
tp1331
a(g189
V\u000a
tp1332
a(g189
V        
p1333
tp1334
a(g18
VnewEntry
p1335
tp1336
a(g344
V^
tp1337
a(g202
V.
tp1338
a(g18
Vnext
p1339
tp1340
a(g189
V 
tp1341
a(g344
V:=
p1342
tp1343
a(g189
V 
tp1344
a(g18
Vstack
p1345
tp1346
a(g344
V^
tp1347
a(g202
V.
tp1348
a(g18
Voverflow
p1349
tp1350
a(g202
V;
tp1351
a(g189
V\u000a
tp1352
a(g189
V        
p1353
tp1354
a(g18
Vstack
p1355
tp1356
a(g344
V^
tp1357
a(g202
V.
tp1358
a(g18
Voverflow
p1359
tp1360
a(g189
V 
tp1361
a(g344
V:=
p1362
tp1363
a(g189
V 
tp1364
a(g18
VnewEntry
p1365
tp1366
a(g202
V;
tp1367
a(g189
V\u000a
tp1368
a(g189
V    \u000a    
p1369
tp1370
a(g127
VEND
p1371
tp1372
a(g202
V;
tp1373
a(g189
V 
tp1374
a(g7
V(* IF *)
p1375
tp1376
a(g189
V\u000a
tp1377
a(g189
V    \u000a    
p1378
tp1379
a(g7
V(* update entry counter *)
p1380
tp1381
a(g189
V\u000a
tp1382
a(g189
V    
p1383
tp1384
a(g114
VINC
p1385
tp1386
a(g202
V(
tp1387
a(g18
Vstack
p1388
tp1389
a(g344
V^
tp1390
a(g202
V.
tp1391
a(g18
VentryCount
p1392
tp1393
a(g202
V)
tp1394
a(g202
V;
tp1395
a(g189
V\u000a
tp1396
a(g189
V    \u000a    
p1397
tp1398
a(g7
V(* pass status to caller *)
p1399
tp1400
a(g189
V\u000a
tp1401
a(g189
V    
p1402
tp1403
a(g18
Vstatus
p1404
tp1405
a(g189
V 
tp1406
a(g344
V:=
p1407
tp1408
a(g189
V 
tp1409
a(g18
Vsuccess
p1410
tp1411
a(g202
V;
tp1412
a(g189
V\u000a
tp1413
a(g189
V    
p1414
tp1415
a(g127
VRETURN
p1416
tp1417
a(g189
V\u000a\u000a
p1418
tp1419
a(g127
VEND
p1420
tp1421
a(g189
V 
tp1422
a(g18
Vpush
p1423
tp1424
a(g202
V;
tp1425
a(g189
V\u000a\u000a\u000a
p1426
tp1427
a(g7
V(* ---------------------------------------------------------------------------\u000a// function:  LIFO.pop( stack, status )\u000a// ---------------------------------------------------------------------------\u000a//\u000a// Removes the top most value from stack <stack> and returns it.  If the stack\u000a// is empty,  that  is  when the  number  of  entries  stored in the stack has\u000a// reached zero,  then NIL is returned.\u000a//\u000a// Entries which were allocated dynamically (above the initial capacity) are\u000a// deallocated when their values are popped.\u000a//\u000a// The status of the operation is passed back in <status>. *)
p1428
tp1429
a(g189
V\u000a\u000a
p1430
tp1431
a(g127
VPROCEDURE
p1432
tp1433
a(g189
V 
tp1434
a(g18
Vpop
p1435
tp1436
a(g189
V 
tp1437
a(g202
V(
tp1438
a(g189
V 
tp1439
a(g127
VVAR
p1440
tp1441
a(g189
V 
tp1442
a(g18
Vstack
p1443
tp1444
a(g189
V 
tp1445
a(g202
V:
tp1446
a(g189
V 
tp1447
a(g18
VStack
p1448
tp1449
a(g202
V;
tp1450
a(g189
V 
tp1451
a(g127
VVAR
p1452
tp1453
a(g189
V 
tp1454
a(g18
Vstatus
p1455
tp1456
a(g189
V 
tp1457
a(g202
V:
tp1458
a(g189
V 
tp1459
a(g18
VStatus
p1460
tp1461
a(g189
V 
tp1462
a(g202
V)
tp1463
a(g189
V 
tp1464
a(g202
V:
tp1465
a(g189
V 
tp1466
a(g18
VDataPtr
p1467
tp1468
a(g202
V;
tp1469
a(g189
V\u000a\u000a
p1470
tp1471
a(g127
VVAR
p1472
tp1473
a(g189
V\u000a
tp1474
a(g189
V    
p1475
tp1476
a(g18
VthisValue
p1477
tp1478
a(g189
V 
tp1479
a(g202
V:
tp1480
a(g189
V 
tp1481
a(g18
VDataPtr
p1482
tp1483
a(g202
V;
tp1484
a(g189
V\u000a
tp1485
a(g189
V    
p1486
tp1487
a(g18
VthisEntry
p1488
tp1489
a(g189
V 
tp1490
a(g202
V:
tp1491
a(g189
V 
tp1492
a(g18
VListPtr
p1493
tp1494
a(g202
V;
tp1495
a(g189
V\u000a
tp1496
a(g189
V    
p1497
tp1498
a(g18
VvaluePtr
p1499
tp1500
a(g189
V 
tp1501
a(g202
V:
tp1502
a(g189
V 
tp1503
a(g127
VPOINTER
p1504
tp1505
a(g189
V 
tp1506
a(g127
VTO
p1507
tp1508
a(g189
V 
tp1509
a(g18
VDataPtr
p1510
tp1511
a(g202
V;
tp1512
a(g189
V\u000a\u000a
p1513
tp1514
a(g127
VBEGIN
p1515
tp1516
a(g189
V\u000a\u000a
p1517
tp1518
a(g189
V    
p1519
tp1520
a(g7
V(* bail out if stack is NIL *)
p1521
tp1522
a(g189
V\u000a
tp1523
a(g189
V    
p1524
tp1525
a(g127
VIF
p1526
tp1527
a(g189
V 
tp1528
a(g18
Vstack
p1529
tp1530
a(g189
V 
tp1531
a(g344
V=
tp1532
a(g189
V 
tp1533
a(g114
VNIL
p1534
tp1535
a(g189
V 
tp1536
a(g127
VTHEN
p1537
tp1538
a(g189
V\u000a
tp1539
a(g189
V        
p1540
tp1541
a(g18
Vstatus
p1542
tp1543
a(g189
V 
tp1544
a(g344
V:=
p1545
tp1546
a(g189
V 
tp1547
a(g18
VinvalidStack
p1548
tp1549
a(g202
V;
tp1550
a(g189
V\u000a
tp1551
a(g189
V        
p1552
tp1553
a(g127
VRETURN
p1554
tp1555
a(g189
V 
tp1556
a(g114
VNIL
p1557
tp1558
a(g202
V;
tp1559
a(g189
V\u000a
tp1560
a(g189
V    
p1561
tp1562
a(g127
VEND
p1563
tp1564
a(g202
V;
tp1565
a(g189
V 
tp1566
a(g7
V(* IF *)
p1567
tp1568
a(g189
V\u000a
tp1569
a(g189
V    \u000a    
p1570
tp1571
a(g7
V(* bail out if stack is empty *)
p1572
tp1573
a(g189
V\u000a
tp1574
a(g189
V    
p1575
tp1576
a(g127
VIF
p1577
tp1578
a(g189
V 
tp1579
a(g18
Vstack
p1580
tp1581
a(g344
V^
tp1582
a(g202
V.
tp1583
a(g18
VentryCount
p1584
tp1585
a(g189
V 
tp1586
a(g344
V=
tp1587
a(g189
V 
tp1588
a(g319
V0
tp1589
a(g189
V 
tp1590
a(g127
VTHEN
p1591
tp1592
a(g189
V\u000a
tp1593
a(g189
V        
p1594
tp1595
a(g18
Vstatus
p1596
tp1597
a(g189
V 
tp1598
a(g344
V:=
p1599
tp1600
a(g189
V 
tp1601
a(g18
VstackEmpty
p1602
tp1603
a(g202
V;
tp1604
a(g189
V\u000a
tp1605
a(g189
V        
p1606
tp1607
a(g127
VRETURN
p1608
tp1609
a(g189
V 
tp1610
a(g114
VNIL
p1611
tp1612
a(g202
V;
tp1613
a(g189
V\u000a
tp1614
a(g189
V    
p1615
tp1616
a(g127
VEND
p1617
tp1618
a(g202
V;
tp1619
a(g189
V 
tp1620
a(g7
V(* IF *)
p1621
tp1622
a(g189
V\u000a\u000a
p1623
tp1624
a(g189
V    
p1625
tp1626
a(g114
VDEC
p1627
tp1628
a(g202
V(
tp1629
a(g18
Vstack
p1630
tp1631
a(g344
V^
tp1632
a(g202
V.
tp1633
a(g18
VentryCount
p1634
tp1635
a(g202
V)
tp1636
a(g202
V;
tp1637
a(g189
V\u000a
tp1638
a(g189
V    \u000a    
p1639
tp1640
a(g7
V(* check if index falls within array segment *)
p1641
tp1642
a(g189
V\u000a
tp1643
a(g189
V    
p1644
tp1645
a(g127
VIF
p1646
tp1647
a(g189
V 
tp1648
a(g18
Vstack
p1649
tp1650
a(g344
V^
tp1651
a(g202
V.
tp1652
a(g18
VentryCount
p1653
tp1654
a(g189
V 
tp1655
a(g344
V<
tp1656
a(g189
V 
tp1657
a(g18
Vstack
p1658
tp1659
a(g344
V^
tp1660
a(g202
V.
tp1661
a(g18
VarraySize
p1662
tp1663
a(g189
V 
tp1664
a(g127
VTHEN
p1665
tp1666
a(g189
V\u000a
tp1667
a(g189
V        \u000a        
p1668
tp1669
a(g7
V(* obtain value at index entryCount in array segment *)
p1670
tp1671
a(g189
V\u000a
tp1672
a(g189
V        \u000a        
p1673
tp1674
a(g7
V(* thisValue := stack^.array^[stack^.entryCount]; *)
p1675
tp1676
a(g189
V\u000a
tp1677
a(g189
V        
p1678
tp1679
a(g18
VvaluePtr
p1680
tp1681
a(g189
V 
tp1682
a(g344
V:=
p1683
tp1684
a(g189
V 
tp1685
a(g18
VADR
p1686
tp1687
a(g202
V(
tp1688
a(g18
Vstack
p1689
tp1690
a(g344
V^
tp1691
a(g202
V.
tp1692
a(g18
Varray
p1693
tp1694
a(g202
V)
tp1695
a(g189
V 
tp1696
a(g344
V+
tp1697
a(g189
V 
tp1698
a(g18
VTSIZE
p1699
tp1700
a(g202
V(
tp1701
a(g18
VDataPtr
p1702
tp1703
a(g202
V)
tp1704
a(g189
V 
tp1705
a(g344
V*
tp1706
a(g189
V 
tp1707
a(g18
Vstack
p1708
tp1709
a(g344
V^
tp1710
a(g202
V.
tp1711
a(g18
VentryCount
p1712
tp1713
a(g202
V;
tp1714
a(g189
V\u000a
tp1715
a(g189
V        
p1716
tp1717
a(g18
VthisValue
p1718
tp1719
a(g189
V 
tp1720
a(g344
V:=
p1721
tp1722
a(g189
V 
tp1723
a(g18
VvaluePtr
p1724
tp1725
a(g344
V^
tp1726
a(g202
V;
tp1727
a(g189
V\u000a
tp1728
a(g189
V        \u000a    
p1729
tp1730
a(g127
VELSE
p1731
tp1732
a(g189
V 
tp1733
a(g7
V(* index falls within overflow segment *)
p1734
tp1735
a(g189
V\u000a
tp1736
a(g189
V        \u000a        
p1737
tp1738
a(g7
V(* obtain value of first entry in overflow list *)
p1739
tp1740
a(g189
V\u000a
tp1741
a(g189
V        
p1742
tp1743
a(g18
VthisValue
p1744
tp1745
a(g189
V 
tp1746
a(g344
V:=
p1747
tp1748
a(g189
V 
tp1749
a(g18
Vstack
p1750
tp1751
a(g344
V^
tp1752
a(g202
V.
tp1753
a(g18
Voverflow
p1754
tp1755
a(g344
V^
tp1756
a(g202
V.
tp1757
a(g18
Vvalue
p1758
tp1759
a(g202
V;
tp1760
a(g189
V\u000a
tp1761
a(g189
V        \u000a        
p1762
tp1763
a(g7
V(* isolate first entry in overflow list *)
p1764
tp1765
a(g189
V\u000a
tp1766
a(g189
V        
p1767
tp1768
a(g18
VthisEntry
p1769
tp1770
a(g189
V 
tp1771
a(g344
V:=
p1772
tp1773
a(g189
V 
tp1774
a(g18
Vstack
p1775
tp1776
a(g344
V^
tp1777
a(g202
V.
tp1778
a(g18
Voverflow
p1779
tp1780
a(g202
V;
tp1781
a(g189
V\u000a
tp1782
a(g189
V        
p1783
tp1784
a(g18
Vstack
p1785
tp1786
a(g344
V^
tp1787
a(g202
V.
tp1788
a(g18
Voverflow
p1789
tp1790
a(g189
V 
tp1791
a(g344
V:=
p1792
tp1793
a(g189
V 
tp1794
a(g18
Vstack
p1795
tp1796
a(g344
V^
tp1797
a(g202
V.
tp1798
a(g18
Voverflow
p1799
tp1800
a(g344
V^
tp1801
a(g202
V.
tp1802
a(g18
Vnext
p1803
tp1804
a(g202
V;
tp1805
a(g189
V\u000a
tp1806
a(g189
V        \u000a        
p1807
tp1808
a(g7
V(* remove the entry from overflow list *)
p1809
tp1810
a(g189
V\u000a
tp1811
a(g189
V        
p1812
tp1813
a(g114
VDISPOSE
p1814
tp1815
a(g202
V(
tp1816
a(g18
VthisEntry
p1817
tp1818
a(g202
V)
tp1819
a(g202
V;
tp1820
a(g189
V\u000a
tp1821
a(g189
V                \u000a    
p1822
tp1823
a(g127
VEND
p1824
tp1825
a(g202
V;
tp1826
a(g189
V 
tp1827
a(g7
V(* IF *)
p1828
tp1829
a(g189
V\u000a\u000a
p1830
tp1831
a(g189
V    
p1832
tp1833
a(g7
V(* return value and status to caller *)
p1834
tp1835
a(g189
V\u000a
tp1836
a(g189
V    
p1837
tp1838
a(g18
Vstatus
p1839
tp1840
a(g189
V 
tp1841
a(g344
V:=
p1842
tp1843
a(g189
V 
tp1844
a(g18
Vsuccess
p1845
tp1846
a(g202
V;
tp1847
a(g189
V\u000a
tp1848
a(g189
V    
p1849
tp1850
a(g127
VRETURN
p1851
tp1852
a(g189
V 
tp1853
a(g18
VthisValue
p1854
tp1855
a(g189
V\u000a\u000a
p1856
tp1857
a(g127
VEND
p1858
tp1859
a(g189
V 
tp1860
a(g18
Vpop
p1861
tp1862
a(g202
V;
tp1863
a(g189
V\u000a\u000a\u000a
p1864
tp1865
a(g7
V(* ---------------------------------------------------------------------------\u000a// function:  LIFO.stackSize( stack )\u000a// ---------------------------------------------------------------------------\u000a//\u000a// Returns the current capacity of <stack>.  The current capacity is the total\u000a// number of allocated entries. Returns zero if NIL is passed in for <stack>.\u000a*)
p1866
tp1867
a(g189
V\u000a
tp1868
a(g127
VPROCEDURE
p1869
tp1870
a(g189
V 
tp1871
a(g18
VstackSize
p1872
tp1873
a(g202
V(
tp1874
a(g189
V 
tp1875
a(g127
VVAR
p1876
tp1877
a(g189
V 
tp1878
a(g18
Vstack
p1879
tp1880
a(g189
V 
tp1881
a(g202
V:
tp1882
a(g189
V 
tp1883
a(g18
VStack
p1884
tp1885
a(g189
V 
tp1886
a(g202
V)
tp1887
a(g189
V 
tp1888
a(g202
V:
tp1889
a(g189
V 
tp1890
a(g18
VStackSize
p1891
tp1892
a(g202
V;
tp1893
a(g189
V\u000a\u000a
p1894
tp1895
a(g127
VBEGIN
p1896
tp1897
a(g189
V\u000a\u000a
p1898
tp1899
a(g189
V    
p1900
tp1901
a(g7
V(* bail out if stack is NIL *)
p1902
tp1903
a(g189
V\u000a
tp1904
a(g189
V    
p1905
tp1906
a(g127
VIF
p1907
tp1908
a(g189
V 
tp1909
a(g18
Vstack
p1910
tp1911
a(g189
V 
tp1912
a(g344
V=
tp1913
a(g189
V 
tp1914
a(g114
VNIL
p1915
tp1916
a(g189
V 
tp1917
a(g127
VTHEN
p1918
tp1919
a(g189
V\u000a
tp1920
a(g189
V        
p1921
tp1922
a(g127
VRETURN
p1923
tp1924
a(g189
V 
tp1925
a(g319
V0
tp1926
a(g202
V;
tp1927
a(g189
V\u000a
tp1928
a(g189
V    
p1929
tp1930
a(g127
VEND
p1931
tp1932
a(g202
V;
tp1933
a(g189
V 
tp1934
a(g7
V(* IF *)
p1935
tp1936
a(g189
V\u000a\u000a
p1937
tp1938
a(g189
V    
p1939
tp1940
a(g127
VIF
p1941
tp1942
a(g189
V 
tp1943
a(g18
Vstack
p1944
tp1945
a(g344
V^
tp1946
a(g202
V.
tp1947
a(g18
VentryCount
p1948
tp1949
a(g189
V 
tp1950
a(g344
V<
tp1951
a(g189
V 
tp1952
a(g18
Vstack
p1953
tp1954
a(g344
V^
tp1955
a(g202
V.
tp1956
a(g18
VarraySize
p1957
tp1958
a(g189
V 
tp1959
a(g127
VTHEN
p1960
tp1961
a(g189
V\u000a
tp1962
a(g189
V        
p1963
tp1964
a(g127
VRETURN
p1965
tp1966
a(g189
V 
tp1967
a(g18
Vstack
p1968
tp1969
a(g344
V^
tp1970
a(g202
V.
tp1971
a(g18
VarraySize
p1972
tp1973
a(g202
V;
tp1974
a(g189
V\u000a
tp1975
a(g189
V    
p1976
tp1977
a(g127
VELSE
p1978
tp1979
a(g189
V\u000a
tp1980
a(g189
V        
p1981
tp1982
a(g127
VRETURN
p1983
tp1984
a(g189
V 
tp1985
a(g18
Vstack
p1986
tp1987
a(g344
V^
tp1988
a(g202
V.
tp1989
a(g18
VentryCount
p1990
tp1991
a(g202
V;
tp1992
a(g189
V\u000a
tp1993
a(g189
V    
p1994
tp1995
a(g127
VEND
p1996
tp1997
a(g202
V;
tp1998
a(g189
V 
tp1999
a(g7
V(* IF *)
p2000
tp2001
a(g189
V\u000a
tp2002
a(g189
V    \u000a
p2003
tp2004
a(g127
VEND
p2005
tp2006
a(g189
V 
tp2007
a(g18
VstackSize
p2008
tp2009
a(g202
V;
tp2010
a(g189
V\u000a\u000a\u000a
p2011
tp2012
a(g7
V(* ---------------------------------------------------------------------------\u000a// function:  LIFO.stackEntries( stack )\u000a// ---------------------------------------------------------------------------\u000a//\u000a// Returns  the  number of entries  stored in stack <stack>,  returns  zero if\u000a// NIL is passed in for <stack>. *)
p2013
tp2014
a(g189
V\u000a\u000a
p2015
tp2016
a(g127
VPROCEDURE
p2017
tp2018
a(g189
V 
tp2019
a(g18
VstackEntries
p2020
tp2021
a(g202
V(
tp2022
a(g189
V 
tp2023
a(g127
VVAR
p2024
tp2025
a(g189
V 
tp2026
a(g18
Vstack
p2027
tp2028
a(g189
V 
tp2029
a(g202
V:
tp2030
a(g189
V 
tp2031
a(g18
VStack
p2032
tp2033
a(g189
V 
tp2034
a(g202
V)
tp2035
a(g189
V 
tp2036
a(g202
V:
tp2037
a(g189
V 
tp2038
a(g18
VStackSize
p2039
tp2040
a(g202
V;
tp2041
a(g189
V\u000a\u000a
p2042
tp2043
a(g127
VBEGIN
p2044
tp2045
a(g189
V\u000a\u000a
p2046
tp2047
a(g189
V    
p2048
tp2049
a(g7
V(* bail out if stack is NIL *)
p2050
tp2051
a(g189
V\u000a
tp2052
a(g189
V    
p2053
tp2054
a(g127
VIF
p2055
tp2056
a(g189
V 
tp2057
a(g18
Vstack
p2058
tp2059
a(g189
V 
tp2060
a(g344
V=
tp2061
a(g189
V 
tp2062
a(g114
VNIL
p2063
tp2064
a(g189
V 
tp2065
a(g127
VTHEN
p2066
tp2067
a(g189
V\u000a
tp2068
a(g189
V        
p2069
tp2070
a(g127
VRETURN
p2071
tp2072
a(g189
V 
tp2073
a(g319
V0
tp2074
a(g202
V;
tp2075
a(g189
V\u000a
tp2076
a(g189
V    
p2077
tp2078
a(g127
VEND
p2079
tp2080
a(g202
V;
tp2081
a(g189
V 
tp2082
a(g7
V(* IF *)
p2083
tp2084
a(g189
V\u000a\u000a
p2085
tp2086
a(g189
V    
p2087
tp2088
a(g127
VRETURN
p2089
tp2090
a(g189
V 
tp2091
a(g18
Vstack
p2092
tp2093
a(g344
V^
tp2094
a(g202
V.
tp2095
a(g18
VentryCount
p2096
tp2097
a(g189
V\u000a
tp2098
a(g189
V    \u000a
p2099
tp2100
a(g127
VEND
p2101
tp2102
a(g189
V 
tp2103
a(g18
VstackEntries
p2104
tp2105
a(g202
V;
tp2106
a(g189
V\u000a\u000a\u000a
p2107
tp2108
a(g7
V(* ---------------------------------------------------------------------------\u000a// function:  LIFO.dispose( stack )\u000a// ---------------------------------------------------------------------------\u000a//\u000a// Disposes of LIFO stack object <stack>.  Returns NIL. *)
p2109
tp2110
a(g189
V\u000a\u000a
p2111
tp2112
a(g127
VPROCEDURE
p2113
tp2114
a(g189
V 
tp2115
a(g18
Vdispose
p2116
tp2117
a(g189
V 
tp2118
a(g202
V(
tp2119
a(g189
V 
tp2120
a(g127
VVAR
p2121
tp2122
a(g189
V 
tp2123
a(g18
Vstack
p2124
tp2125
a(g189
V 
tp2126
a(g202
V:
tp2127
a(g189
V 
tp2128
a(g18
VStack
p2129
tp2130
a(g189
V 
tp2131
a(g202
V)
tp2132
a(g189
V 
tp2133
a(g202
V:
tp2134
a(g189
V 
tp2135
a(g18
VStack
p2136
tp2137
a(g202
V;
tp2138
a(g189
V\u000a\u000a
p2139
tp2140
a(g127
VVAR
p2141
tp2142
a(g189
V\u000a
tp2143
a(g189
V    
p2144
tp2145
a(g18
VthisEntry
p2146
tp2147
a(g189
V 
tp2148
a(g202
V:
tp2149
a(g189
V 
tp2150
a(g18
VListPtr
p2151
tp2152
a(g202
V;
tp2153
a(g189
V\u000a\u000a
p2154
tp2155
a(g127
VBEGIN
p2156
tp2157
a(g189
V\u000a\u000a
p2158
tp2159
a(g189
V    
p2160
tp2161
a(g7
V(* bail out if stack is NIL *)
p2162
tp2163
a(g189
V\u000a
tp2164
a(g189
V    
p2165
tp2166
a(g127
VIF
p2167
tp2168
a(g189
V 
tp2169
a(g18
Vstack
p2170
tp2171
a(g189
V 
tp2172
a(g344
V=
tp2173
a(g189
V 
tp2174
a(g114
VNIL
p2175
tp2176
a(g189
V 
tp2177
a(g127
VTHEN
p2178
tp2179
a(g189
V\u000a
tp2180
a(g189
V        
p2181
tp2182
a(g127
VRETURN
p2183
tp2184
a(g189
V 
tp2185
a(g114
VNIL
p2186
tp2187
a(g202
V;
tp2188
a(g189
V\u000a
tp2189
a(g189
V    
p2190
tp2191
a(g127
VEND
p2192
tp2193
a(g202
V;
tp2194
a(g189
V 
tp2195
a(g7
V(* IF *)
p2196
tp2197
a(g189
V\u000a
tp2198
a(g189
V    \u000a    
p2199
tp2200
a(g7
V(* deallocate any entries in stack's overflow list *)
p2201
tp2202
a(g189
V\u000a
tp2203
a(g189
V    
p2204
tp2205
a(g127
VWHILE
p2206
tp2207
a(g189
V 
tp2208
a(g18
Vstack
p2209
tp2210
a(g344
V^
tp2211
a(g202
V.
tp2212
a(g18
Voverflow
p2213
tp2214
a(g189
V 
tp2215
a(g344
V#
tp2216
a(g189
V 
tp2217
a(g114
VNIL
p2218
tp2219
a(g189
V 
tp2220
a(g127
VDO
p2221
tp2222
a(g189
V\u000a
tp2223
a(g189
V        \u000a        
p2224
tp2225
a(g7
V(* isolate first entry in overflow list *)
p2226
tp2227
a(g189
V\u000a
tp2228
a(g189
V        
p2229
tp2230
a(g18
VthisEntry
p2231
tp2232
a(g189
V 
tp2233
a(g344
V:=
p2234
tp2235
a(g189
V 
tp2236
a(g18
Vstack
p2237
tp2238
a(g344
V^
tp2239
a(g202
V.
tp2240
a(g18
Voverflow
p2241
tp2242
a(g202
V;
tp2243
a(g189
V\u000a
tp2244
a(g189
V        
p2245
tp2246
a(g18
Vstack
p2247
tp2248
a(g344
V^
tp2249
a(g202
V.
tp2250
a(g18
Voverflow
p2251
tp2252
a(g189
V 
tp2253
a(g344
V:=
p2254
tp2255
a(g189
V 
tp2256
a(g18
Vstack
p2257
tp2258
a(g344
V^
tp2259
a(g202
V.
tp2260
a(g18
Voverflow
p2261
tp2262
a(g344
V^
tp2263
a(g202
V.
tp2264
a(g18
Vnext
p2265
tp2266
a(g202
V;
tp2267
a(g189
V\u000a
tp2268
a(g189
V        \u000a        
p2269
tp2270
a(g7
V(* deallocate the entry *)
p2271
tp2272
a(g189
V\u000a
tp2273
a(g189
V        
p2274
tp2275
a(g114
VDISPOSE
p2276
tp2277
a(g202
V(
tp2278
a(g18
VthisEntry
p2279
tp2280
a(g202
V)
tp2281
a(g202
V;
tp2282
a(g189
V\u000a
tp2283
a(g189
V        \u000a    
p2284
tp2285
a(g127
VEND
p2286
tp2287
a(g202
V;
tp2288
a(g189
V 
tp2289
a(g7
V(* WHILE *)
p2290
tp2291
a(g189
V\u000a
tp2292
a(g189
V    \u000a    
p2293
tp2294
a(g7
V(* deallocate stack object and pass NIL to caller *)
p2295
tp2296
a(g189
V\u000a
tp2297
a(g189
V    
p2298
tp2299
a(g18
VDEALLOCATE
p2300
tp2301
a(g202
V(
tp2302
a(g18
Vstack
p2303
tp2304
a(g202
V,
tp2305
a(g189
V 
tp2306
a(g18
VTSIZE
p2307
tp2308
a(g202
V(
tp2309
a(g18
VStack
p2310
tp2311
a(g202
V)
tp2312
a(g189
V 
tp2313
a(g344
V+
tp2314
a(g189
V 
tp2315
a(g18
VTSIZE
p2316
tp2317
a(g202
V(
tp2318
a(g18
VDataPtr
p2319
tp2320
a(g202
V)
tp2321
a(g189
V 
tp2322
a(g344
V*
tp2323
a(g189
V 
tp2324
a(g202
V(
tp2325
a(g18
Vstack
p2326
tp2327
a(g344
V^
tp2328
a(g202
V.
tp2329
a(g18
VarraySize
p2330
tp2331
a(g189
V 
tp2332
a(g344
V-
tp2333
a(g189
V 
tp2334
a(g319
V1
tp2335
a(g202
V)
tp2336
a(g202
V)
tp2337
a(g202
V;
tp2338
a(g189
V\u000a
tp2339
a(g189
V    
p2340
tp2341
a(g127
VRETURN
p2342
tp2343
a(g189
V 
tp2344
a(g114
VNIL
p2345
tp2346
a(g189
V\u000a\u000a
p2347
tp2348
a(g127
VEND
p2349
tp2350
a(g189
V 
tp2351
a(g18
Vdispose
p2352
tp2353
a(g202
V;
tp2354
a(g189
V\u000a\u000a\u000a
p2355
tp2356
a(g127
VEND
p2357
tp2358
a(g189
V 
tp2359
a(g18
VLIFO
p2360
tp2361
a(g202
V.
tp2362
a(g189
V\u000a
tp2363
a.